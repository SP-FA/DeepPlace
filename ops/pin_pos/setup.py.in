##
# @file   setup.py.in
# @author Xiaohan Gao
# @date   Sep 2019
# @brief  For CMake to generate setup.py file 
#

from setuptools import setup
import torch
from torch.utils.cpp_extension import BuildExtension, CppExtension, CUDAExtension

import os
import sys
import copy

os.environ["CC"] = "${CMAKE_C_COMPILER}"
os.environ["CXX"] = "${CMAKE_CXX_COMPILER}"
os.environ["CUDA_HOME"] = "${CUDA_TOOLKIT_ROOT_DIR}"

utility_dir = "${UTILITY_LIBRARY_DIRS}"
ops_dir = "${OPS_DIR}"

cuda_flags = '${CMAKE_CUDA_FLAGS}'.split(';')
print("cuda_flags = %s" % (' '.join(cuda_flags)))

cub_dir = "${CUB_DIR}"

include_dirs = [cub_dir, ops_dir]
lib_dirs = [utility_dir]
libs = ['utility'] 

tokens = str(torch.__version__).split('.')
torch_major_version = "-DTORCH_MAJOR_VERSION=%d" % (int(tokens[0]))
torch_minor_version = "-DTORCH_MINOR_VERSION=%d" % (int(tokens[1]))

def add_prefix(filename):
    return os.path.join('${CMAKE_CURRENT_SOURCE_DIR}/src', filename)

modules = []

modules.extend([
    CppExtension('pin_pos_cpp', 
        [
            add_prefix('pin_pos.cpp')
            ], 
        include_dirs=include_dirs, 
        library_dirs=lib_dirs,
        libraries=libs,
        extra_compile_args={
            'cxx' : [torch_major_version, torch_minor_version, '-fopenmp']
            }),
    ])

if "${CUDA_FOUND}".upper() == 'TRUE': 
    modules.extend([
            CUDAExtension('pin_pos_cuda', 
                [
                    add_prefix('pin_pos_cuda.cpp'),
                    add_prefix('pin_pos_cuda_kernel.cu')
                    ], 
                include_dirs=include_dirs, 
                library_dirs=lib_dirs,
                libraries=libs,
                extra_compile_args={
                    'cxx': ['-O2', torch_major_version, torch_minor_version], 
                    'nvcc': copy.deepcopy(cuda_flags)
                    }
                ),
            CUDAExtension('pin_pos_cuda_segment', 
                [
                    add_prefix('pin_pos_cuda_segment.cpp'),
                    add_prefix('pin_pos_cuda_segment_kernel.cu')
                    ], 
                include_dirs=include_dirs, 
                library_dirs=lib_dirs,
                libraries=libs,
                extra_compile_args={
                    'cxx': ['-O2', torch_major_version, torch_minor_version], 
                    'nvcc': copy.deepcopy(cuda_flags)
                    }
                ),
        ])

setup(
        name='pin_pos',
        ext_modules=modules,
        cmdclass={
            'build_ext': BuildExtension
            })
